

# This file was *autogenerated* from the file gyak4.sage
from sage.all_cmdline import *   # import sage library

_sage_const_0 = Integer(0); _sage_const_1 = Integer(1); _sage_const_2 = Integer(2); _sage_const_5 = Integer(5); _sage_const_9 = Integer(9); _sage_const_4 = Integer(4)
def generate_Z_m(m):
	arr = []
	for i in range (_sage_const_0 , m):
		arr.append(i)
	return arr

def generate_Z_star_m(m):
	return m.coprime_integers(m)

def egcd(a, b):
	if a == _sage_const_0 :
		return (b, _sage_const_0 , _sage_const_1 )
	else:
        	g, y, x = egcd(b % a, a)
        	return (g, x - (b // a) * y, y)

def modinv(a, m):
	g, x, y = egcd(a, m)
	if g != _sage_const_1 :
		raise Exception("Modular inverse doesn't exist!")
	else:
		return x % m

def is_generator(g, p):
	set = []
	for i in range(_sage_const_0 , p - _sage_const_2 ):
		x = pow(g, i) % p
		if x in set:
			return false
		else:
			set.append(x)
	return true

def generate_generators(p):
	set = []
	for i in range(_sage_const_2 , p - _sage_const_1 ):
		if is_generator(i, p):
			set.append(i)
	return set

m = _sage_const_5 
Z = generate_Z_m(m)
Z_star = generate_Z_star_m(m)
mod_inv = modinv(_sage_const_9 , _sage_const_5 )
generator = is_generator(_sage_const_4 , _sage_const_5 )
generators = generate_generators(m)

print(Z)
print(Z_star)
print(mod_inv)
print(generator)
print(generators)


